/**
 * NOTE: This class is auto generated by Kora OpenAPI Generator (https://openapi-generator.tech) (7.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ru.planet.auth.api;

import ru.tinkoff.kora.http.server.common.handler.HttpServerResponseEntityMapper;
import ru.tinkoff.kora.http.server.common.handler.HttpServerResponseMapper;
import ru.tinkoff.kora.http.server.common.HttpServerResponse;
import ru.tinkoff.kora.http.server.common.HttpServerRequest;
import ru.tinkoff.kora.http.common.HttpResponseEntity;
import ru.tinkoff.kora.http.common.body.HttpBody;
import ru.tinkoff.kora.http.common.header.HttpHeaders;
import ru.tinkoff.kora.common.Context;


import ru.planet.auth.api.AuthApiResponses.*;

import ru.planet.auth.model.AuthErrorResponse;
import ru.planet.auth.model.AuthRequest;
import ru.planet.auth.model.AuthResponse;
import ru.planet.auth.model.Login400Response;

@ru.tinkoff.kora.common.annotation.Generated("openapi generator kora server")
public interface AuthApiServerResponseMappers {
  @ru.tinkoff.kora.common.annotation.Generated("openapi generator kora server")
  final class LoginApiResponseMapper implements HttpServerResponseMapper<LoginApiResponse>{
    private final HttpServerResponseMapper<HttpResponseEntity<AuthResponse>> response200Delegate;
    private final HttpServerResponseMapper<HttpResponseEntity<Login400Response>> response400Delegate;
    private final HttpServerResponseMapper<HttpResponseEntity<AuthErrorResponse>> response422Delegate;


    public LoginApiResponseMapper(
      @ru.tinkoff.kora.json.common.annotation.Json
      HttpServerResponseMapper<AuthResponse> response200Delegate,
            @ru.tinkoff.kora.json.common.annotation.Json
      HttpServerResponseMapper<Login400Response> response400Delegate,
            @ru.tinkoff.kora.json.common.annotation.Json
      HttpServerResponseMapper<AuthErrorResponse> response422Delegate
      ) {
      this.response200Delegate = new HttpServerResponseEntityMapper<>(response200Delegate);
      this.response400Delegate = new HttpServerResponseEntityMapper<>(response400Delegate);
      this.response422Delegate = new HttpServerResponseEntityMapper<>(response422Delegate);
    }

    @Override
    public HttpServerResponse apply(Context ctx, HttpServerRequest request, LoginApiResponse response) throws java.io.IOException { 
      if (response instanceof LoginApiResponse.Login200ApiResponse rs) { 
        var headers = HttpHeaders.of();
        
        
        
        var entity = HttpResponseEntity.of(200, headers, rs.content());
        return this.response200Delegate.apply(ctx, request, entity);
      }
      if (response instanceof LoginApiResponse.Login400ApiResponse rs) { 
        var headers = HttpHeaders.of();
        
        
        
        var entity = HttpResponseEntity.of(400, headers, rs.content());
        return this.response400Delegate.apply(ctx, request, entity);
      }
      if (response instanceof LoginApiResponse.Login422ApiResponse rs) { 
        var headers = HttpHeaders.of();
        
        
        
        var entity = HttpResponseEntity.of(422, headers, rs.content());
        return this.response422Delegate.apply(ctx, request, entity);
      }
      throw new IllegalStateException();
    }
  }

}
