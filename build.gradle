import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

buildscript {
    dependencies {
        classpath("ru.tinkoff.kora:openapi-generator:1.1.17")
    }
}

plugins {
    id "java"
    id "jacoco"
    id "application"

    id "org.openapi.generator" version "7.4.0"
    id "com.google.protobuf" version "0.9.4"
}

applicationName = "application"
mainClassName = "ru.planet.auth.Application"

sourceCompatibility = JavaVersion.VERSION_21
targetCompatibility = JavaVersion.VERSION_21

repositories {
    mavenCentral()
}

configurations {
    koraBom
    annotationProcessor.extendsFrom(koraBom)
    compileOnly.extendsFrom(koraBom)
    implementation.extendsFrom(koraBom)
    api.extendsFrom(koraBom)
}

dependencies {
    koraBom platform("ru.tinkoff.kora:kora-parent:1.1.17")
    implementation "org.mapstruct:mapstruct:1.5.5.Final"
    annotationProcessor "org.mapstruct:mapstruct-processor:1.5.5.Final"
    annotationProcessor "ru.tinkoff.kora:annotation-processors"

    implementation "ru.tinkoff.kora:grpc-server"
    implementation "io.grpc:grpc-protobuf:1.58.0"
    implementation "ru.tinkoff.kora:cache-caffeine"
    implementation "javax.annotation:javax.annotation-api:1.3.2"
    implementation "ru.tinkoff.kora:http-server-undertow"
    implementation "ru.tinkoff.kora:logging-logback"
    implementation "ru.tinkoff.kora:config-hocon"
    implementation "ru.tinkoff.kora:openapi-management"
    implementation "ru.tinkoff.kora:json-module"
    implementation "ru.tinkoff.kora:validation-module"
    implementation "ru.tinkoff.kora:micrometer-module"


    implementation "ru.tinkoff.kora:database-jdbc"
    implementation 'org.mindrot:jbcrypt:0.4'
    annotationProcessor "org.projectlombok:lombok:1.18.36"
    compileOnly 'org.projectlombok:lombok:1.18.36'

    implementation "org.postgresql:postgresql:42.7.4"

    implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'

    testImplementation "ru.tinkoff.kora:test-junit5"
    testImplementation "org.testcontainers:junit-jupiter:1.19.8"
}

protobuf {
    protoc { artifact = "com.google.protobuf:protoc:3.25.3" }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:1.62.2" }
    }

    generateProtoTasks {
        all()*.plugins { grpc {} }
    }
}

test.dependsOn tasks.generateProto
test.dependsOn tasks.distTar


application {
    applicationDefaultJvmArgs = ["-Dfile.encoding=UTF-8"]
}

//noinspection GroovyAssignabilityCheck
run {
    environment([
            "GRPC_PORT"                : "9090",
            "METRIC_COLLECTOR_ENDPOINT": "9091",
    ])
}

test {
    jvmArgs += [
            "-XX:+TieredCompilation",
            "-XX:TieredStopAtLevel=1",
    ]

    environment([
            "": ""
    ])

    useJUnitPlatform()
    testLogging {
        showStandardStreams(true)
        events("passed", "skipped", "failed")
        exceptionFormat("full")
    }

    jacoco {
        excludes += ["**/Application*"]
    }

    reports {
        html.required = false
        junitXml.required = false
    }
}

tasks.register("openApiGenerateHttpServer", GenerateTask) {
    generatorName = "kora"
    group = "openapi tools"
    inputSpec = "$projectDir/src/main/resources/openapi/planet-auth.yaml"
    outputDir = "$projectDir/build/generated/openapi"
    apiPackage = "ru.planet.auth.api"
    modelPackage = "ru.planet.auth.model"
    invokerPackage = "ru.planet.auth.invoker"
    configOptions = [
            mode                  : "java-server",
            enableServerValidation: "true"
    ]
}

compileJava.dependsOn tasks.openApiGenerateHttpServer

sourceSets {
    main {
        java {
            srcDirs "build/generated/source/proto/main/grpc"
            srcDirs "build/generated/source/proto/main/java"
            srcDirs "build/generated/openapi"
        }
    }
}

distTar {
    archiveFileName = "application.tar"
}

compileJava {
    options.encoding("UTF-8")
    options.incremental(true)
    options.fork = false
}

check.dependsOn jacocoTestReport
jacocoTestReport {
    reports {
        xml.required = true
        html.outputLocation = layout.buildDirectory.dir("jacocoHtml")
    }
}

javadoc {
    options.encoding = "UTF-8"
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption("html5", true)
    }
}